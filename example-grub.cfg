#
# RUN 'rm -rf /boot/' AFTER EDITING THIS FILE
#

date

if [ -s $prefix/grubenv ]; then
  load_env
fi
if [ "${next_entry}" ] ; then
   set default="${next_entry}"
   set next_entry=
   save_env next_entry
   set boot_once=true
else
   set default="0"
fi

if [ x"${feature_menuentry_id}" = xy ]; then
  menuentry_id_option="--id"
else
  menuentry_id_option=""
fi

export menuentry_id_option

if [ "${prev_saved_entry}" ]; then
  set saved_entry="${prev_saved_entry}"
  save_env saved_entry
  set prev_saved_entry=
  save_env prev_saved_entry
  set boot_once=true
fi

function savedefault {
  if [ -z "${boot_once}" ]; then
    saved_entry="${chosen}"
    save_env saved_entry
  fi
}

function load_video {
  if [ x$feature_all_video_module = xy ]; then
    insmod all_video
  else
    insmod efi_gop
    insmod efi_uga
    insmod ieee1275_fb
    insmod vbe
    insmod vga
    insmod video_bochs
    insmod video_cirrus
  fi
}

if [ x$feature_default_font_path = xy ] ; then
   font=unicode
else
insmod part_msdos
insmod zfs
set root='hd0,msdos1'
    font="/ROOT/debian-gnu-linux@/usr/share/grub/unicode.pf2"
fi

if loadfont $font ; then
  set gfxmode=auto
  load_video
  insmod gfxterm
  set locale_dir=$prefix/locale
  set lang=zh_CN
  insmod gettext
fi
terminal_output gfxterm
if [ x$feature_timeout_style = xy ] ; then
  set timeout_style=menu
  set timeout=5
# Fallback normal timeout code in case the timeout_style feature is
# unavailable.
else
  set timeout=5
fi

set pool=zr

menuentry "Solaris 11 Express, 64-bit kernel" --class os {
	insmod part_msdos
	insmod zfs
	insmod multiboot_no_escape
	insmod gzio
	set root='hd0,msdos2'
	root_fs=ROOT/solaris
	kernel=/platform/i86pc/kernel/amd64/unix
	initrd=/platform/i86pc/amd64/boot_archive
	zfs-bootfs /$root_fs@/ bootfs
	echo "bootfs = $bootfs"
	echo "Loading kernel $pool/$root_fs@$kernel ..."
	multiboot /$root_fs@/$kernel $kernel -B $bootfs -m verbose
	echo "Loading initial ramdisk $pool/$root_fs@$initrd ..."
	module /$root_fs@$initrd
}
menuentry "Solaris 11 Express, 32-bit kernel" --class os {
	insmod part_msdos
	insmod zfs
	insmod multiboot_no_escape
	insmod gzio
	set root='hd0,msdos2'
	root_fs=ROOT/solaris
	kernel=/platform/i86pc/kernel/unix
	initrd=/platform/i86pc/boot_archive
	zfs-bootfs /$root_fs@/ bootfs
	echo "bootfs = $bootfs"
	echo "Loading kernel $pool/$root_fs@$kernel ..."
	multiboot /$root_fs@/$kernel $kernel -B $bootfs -m verbose
	echo "Loading initial ramdisk $pool/$root_fs@$initrd ..."
	module /$root_fs@$initrd
}
menuentry "Solaris 11 Express, 64-bit kernel, with fixed bootfs" --class os {
	insmod part_msdos
	insmod zfs
	insmod multiboot_no_escape
	insmod gzio
	set root='hd0,msdos2'
	root_fs=ROOT/solaris
	kernel=/platform/i86pc/kernel/amd64/unix
	initrd=/platform/i86pc/amd64/boot_archive
	bootfs='zfs-bootfs=zr/96,bootpath="/pci@0,0/pci103c,30be@1f,2/disk@0,0:s",diskdevid="id1,sd@SATA_____Hitachi_HTS54321091222FBH206VCHTSM0C/s"'
	echo "bootfs = $bootfs"
	echo "Loading kernel $pool/$root_fs@$kernel ..."
	multiboot /$root_fs@/$kernel $kernel -B $bootfs -m verbose
	echo "Loading initial ramdisk $pool/$root_fs@$initrd ..."
	module /$root_fs@$initrd
}
menuentry "Solaris 11 Express, 32-bit kernel, with fixed bootfs" --class os {
	insmod part_msdos
	insmod zfs
	insmod multiboot_no_escape
	insmod gzio
	set root='hd0,msdos2'
	root_fs=ROOT/solaris
	kernel=/platform/i86pc/kernel/unix
	initrd=/platform/i86pc/boot_archive
	bootfs='zfs-bootfs=zr/96,bootpath="/pci@0,0/pci103c,30be@1f,2/disk@0,0:s",diskdevid="id1,sd@SATA_____Hitachi_HTS54321091222FBH206VCHTSM0C/s"'
	echo "bootfs = $bootfs"
	echo "Loading kernel $pool/$root_fs@$kernel ..."
	multiboot /$root_fs@/$kernel $kernel -B $bootfs -m verbose
	echo "Loading initial ramdisk $pool/$root_fs@$initrd ..."
	module /$root_fs@$initrd
}

if [ -f  ${config_directory}/custom.cfg ]; then
  source ${config_directory}/custom.cfg
elif [ -z "${config_directory}" -a -f  $prefix/custom.cfg ]; then
  source $prefix/custom.cfg;
fi
